import java.io.DataInputStream;
import java.io.IOException;
import java.math.BigInteger;
import java.util.Random;
import java.util.Scanner;
 
public class RSA
{
    
   public static boolean isPrime(int n) {  
       if (n <= 1) {  
           return false;  
       }  
       for (int i = 2; i <= Math.sqrt(n); i++) {  
           if (n % i == 0) {  
               return false;  
           }  
       }  
       return true;  
   }  
       public static int gcd(int a, int b) 
       { 
               if (a == 0) 
                   return b; 
               return gcd(b % a, a); 
       } 
    public static void main(String[] args)
    {
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter p ");
        int p=sc.nextInt();
        if(!isPrime(p))
        {
            System.out.println("P should be prime\nEnter again:");
            p=sc.nextInt();
        }
        System.out.println("enter q:");
        int q= sc.nextInt();
         if(!isPrime(q))
        {
            System.out.println("P should be prime\nEnter again:");
            q=sc.nextInt();
        }
        int n=p*q;
        int  e=0;
        int phi= (p-1)*(q-1);
        System.out.println("Phi:"+ phi);
        for(int i=2;i<phi;i++)
        {
            if(gcd(i,phi)==1)
            {  e=i;
                break;
            }
        }
        System.out.println("E:"+e);
        int d=0;
          for(int i=1;i<phi;i++)
        {
            if(((e*i)%phi)==1)
            {
                d=i;
                break;
            }
        }
          System.out.println("public key(n,e): ("+n+","+e+")");
          System.out.println("Private key(d,p,q): ("+d+","+p+","+q+")");
 
             System.out.println("Enter plaintext:");
             String str=sc.next();
             
//             String b="";
//             if(str.matches("[A-Za-z]+"))
//             {
//                 for(int i=0;i<str.length();i++)
//                    b+=(int)str.charAt(i);
//                   
//                 str=b;
//             }
           
             
             String cipher="";
            
             cipher+=(int)(Math.pow(Integer.parseInt(str),e) % n);
            
             System.out.println("Cipher text:"+cipher);
             System.out.println("Decrypting......");
                String dec="";
                 
                 double power=Math.pow(Integer.parseInt(cipher),d);
                  dec+=(power % n);
                
                  System.out.println("Decrypted text:"+dec);            
        
        
        
    }
}
/**
 Enter p 
11
enter q:
3
Phi:20
E:3
public key(n,e): (33,3)
Private key(d,p,q): (7,11,3)
Enter plaintext:
4
Cipher text:31
Decrypting......
Decrypted text:4.0

Enter p 
23
enter q:
13
Phi:264
E:5
public key(n,e): (299,5)
Private key(d,p,q): (53,23,13)
Enter plaintext:
32
Cipher text:54
Decrypting......
Decrypted text:150.0
 
 */