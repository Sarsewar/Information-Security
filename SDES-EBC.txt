import java.util.*;
import java.lang.*;
import java.io.*;

/* Name of the class has to be "Main" only if the class is public. */
class Codechef {

    public static String[] KeyGeneration() {
        String[] keygen = new String[2];
        Scanner sc = new Scanner(System.in);
        System.out.println("enter the 10bit key:");
        int[] sp = {3, 5, 2, 7, 4, 10, 1, 9, 8, 6};
        int[] cs = {6, 3, 7, 4, 8, 5, 10, 9};
        String key = sc.next();
        char[] k = key.toCharArray();
        char[] kl = new char[5];
        char[] kr = new char[5];
        int m = 0;
        char[] ks = new char[10];
        //straight p box
        for (int i = 0; i < 10; i++) {
            ks[i] = k[(sp[i] - 1)];
        }
        k = ks;
        System.out.println("\nStraight p-box:");
        for (int i = 0; i < 10; i++) {
            System.out.print(ks[i] + "\t");
        }

        for (int i = 0; i < 5; i++) {
            kl[m] = k[i];
            kr[m] = k[m + 5];
            m++;
        }
        int[] r1 = new int[8];
        int[] r2 = new int[8];
        char temp1 = kl[0];
        char temp2 = kr[0];
        //shift left 1 bit
        for (int i = 0; i < 4; i++) {
            kl[i] = kl[i + 1];
            kr[i] = kr[i + 1];
        }
        kl[4] = temp1;
        kr[4] = temp2;
        System.out.println("\nShift Left 1 bit{left side} : ");
        for (int i = 0; i < 5; i++) {
            System.out.print(kl[i] + "\t");
        }
        System.out.println("\nShift Left 1 bit{right side} : ");
        for (int i = 0; i < 5; i++) {
            System.out.print(kr[i] + "\t");
        }
        System.out.println();
        //compression 
        for (int i = 0; i < 8; i++) {
            if ((cs[i] - 1) < 5) {
                r1[i] = Integer.parseInt(String.valueOf(kl[cs[i] - 1]));
            } else {
                r1[i] = Integer.parseInt(String.valueOf(kr[(cs[i] - 1) % 5]));
            }
        }
        String x = "";
        System.out.println("\nRound key 1:");
        for (int i = 0; i < 8; i++) {
            System.out.print(r1[i] + "\t");
            x += String.valueOf(r1[i]);
        }
        keygen[0] = x;
        x = "";
        System.out.println();
        //Shift left 2bit 
        temp1 = kl[0];
        char temp11 = kl[1];
        temp2 = kr[0];
        char temp22 = kr[1];
        for (int i = 0; i < 3; i++) {
            kl[i] = kl[i + 2];
            kr[i] = kr[i + 2];
        }
        kl[3] = temp1;
        kl[4] = temp11;
        kr[3] = temp2;
        kr[4] = temp22;
        System.out.println("\nShift Left 2 bit{left side} : ");
        for (int i = 0; i < 5; i++) {
            System.out.print(kl[i] + "\t");
        }
        System.out.println("\nShift Left 2 bit{right side} : ");
        for (int i = 0; i < 5; i++) {
            System.out.print(kr[i] + "\t");
        }
        System.out.println();

        //compression 
        for (int i = 0; i < 8; i++) {
            if ((cs[i] - 1) < 5) {
                r2[i] = Integer.parseInt(String.valueOf(kl[cs[i] - 1]));
            } else {
                r2[i] = Integer.parseInt(String.valueOf(kr[(cs[i] - 1) % 5]));
            }
        }
        System.out.println("\nRound key 2:");
        for (int i = 0; i < 8; i++) {
            System.out.print(r2[i] + "\t");
            x += r2[i];
        }
        keygen[1] = x;
        return keygen;
    }

    public static int XOR(char c, char k) {
        int x = Integer.parseInt(String.valueOf(c)) ^ Integer.parseInt(String.valueOf(k));
        return x;
    }

    public static int StringToBinary(String s) {
        switch (s) {
            case "00":
                return 0;
            case "01":
                return 1;
            case "10":
                return 2;
            case "11":
                return 3;
        }
        return -1;
    }

    public static String Func(String r, String k) {
        int[] ep = {4, 1, 2, 3, 2, 3, 4, 1};
        int[] sp = {2, 4, 3, 1};
        String out = "";
        for (int i = 0; i < 8; i++) {
            out += r.charAt(ep[i] - 1);
        }
        System.out.println("\nExpansion:"+out);
        String inps = "";
        for (int i = 0; i < 8; i++) {
            inps += String.valueOf(XOR(out.charAt(i), k.charAt(i)));
        }
        
        String[][] s0 = {{"01", "00", "11", "10"},
        {"11", "10", "01", "00"},
        {"00", "10", "01", "11"},
        {"11", "01", "11", "10"}};

        String[][] s1 = {{"00", "01", "10", "11"},
        {"10", "00", "01", "11"},
        {"11", "00", "01", "00"},
        {"10", "01", "00", "11"}};
        String sl = inps.substring(0, 4);
        String sr = inps.substring(4, 8);
        int x = StringToBinary(String.valueOf(sl.charAt(0)) + String.valueOf(sl.charAt(3)));
        int y = StringToBinary(String.valueOf(sl.charAt(1) + String.valueOf(sl.charAt(2))));
        String v = s0[x][y];
        x = StringToBinary(String.valueOf(sr.charAt(0)) + String.valueOf(sr.charAt(3)));
        y = StringToBinary(String.valueOf(sr.charAt(1) + String.valueOf(sr.charAt(2))));
        v += s1[x][y];
        System.out.println("S-box output:"+v);
        char[] ch = v.toCharArray();
        v = "";
        for (int i = 0; i < 4; i++) {
            v += String.valueOf(ch[sp[i] - 1]);
        }
       
        return v;
    }

    public static String Round(String plain, String key) {
        String sl = plain.substring(0, 4);
        String sr = plain.substring(4, 8);
        String f = Func(sr, key);
        String left = "";
        for (int i = 0; i < 4; i++) {
            left += XOR(sl.charAt(i), f.charAt(i));
        }
        String r = sr + left;
        return r;
    }

    public static void SDES() {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter 8 bit PlainText ");
        String plainText = sc.next();
        int[] ip = {2, 6, 3, 1, 4, 8, 5, 7};
        int[] ipn = {4, 1, 3, 5, 7, 2, 8, 6};
        String[] keygen = KeyGeneration();
        char[] pt = plainText.toCharArray();
        String ipString = "";
        for (int i = 0; i < 8; i++) {
            ipString += pt[ip[i] - 1];
        }
        String r1 = Round(ipString, keygen[0]);
        System.out.println("\nRound 1:"+r1);
        String r2 = Round(r1, keygen[1]);
        System.out.println("\nRound 2:"+r2);
        char[] fp = r2.toCharArray();
        ipString="";
        for (int i = 0; i < 8; i++) {
            ipString += fp[ipn[i] - 1];
        }
        System.out.println("\nCipher :" + ipString);

    }

    public static void main(String[] args) {

        SDES();
    }

}
/*Enter 8 bit PlainText 
11110010
enter the 10bit key:
1011100110
*/
